<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Manoj Kumar</title><description>Fun Profit NodeJs Python</description><link>https://ghost-nithmanoj.c9users.io/</link><generator>Ghost 0.11</generator><lastBuildDate>Wed, 16 Nov 2016 04:47:02 GMT</lastBuildDate><atom:link href="https://ghost-nithmanoj.c9users.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>JUGGLING ASYNC</title><description>&lt;p&gt;This problem is the same as the previous problem (HTTP COLLECT) in that you need to use &lt;code&gt;http.get()&lt;/code&gt;. However, this time you will be provided with three URLs as the first three command-line arguments. &lt;br&gt;
  You must collect the complete content provided to you by each of the URLs and&lt;/p&gt;</description><link>https://ghost-nithmanoj.c9users.io/juggling-async/</link><guid isPermaLink="false">a2d1205f-a0b9-462e-b6ce-a2621dac61fd</guid><category>nodejs</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Wed, 16 Nov 2016 04:19:18 GMT</pubDate><content:encoded>&lt;p&gt;This problem is the same as the previous problem (HTTP COLLECT) in that you need to use &lt;code&gt;http.get()&lt;/code&gt;. However, this time you will be provided with three URLs as the first three command-line arguments. &lt;br&gt;
  You must collect the complete content provided to you by each of the URLs and print it to the console. And that also in proper sequence i.e. link 1 data first.&lt;/p&gt;

&lt;h5 id="solution1withoutusinganyexternallibrary"&gt;Solution 1: Without using any external library&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');  
var bl = require('bl');  
var results = [];  
var count = 0;

function printResults () {  
  for (var i = 0; i &amp;lt; 3; i++) {
    console.log(results[i]);
  }
}

function httpGet (index) {  
  http.get(process.argv[2 + index], function (response) {
    response.pipe(bl(function (err, data) {
      if (err) {
        return console.error(err);
      }

      results[index] = data.toString()
      count++

      if (count === 3) {
        printResults();
      }
    }));
  });
}

for (var i = 0; i &amp;lt; 3; i++) {  
  httpGet(i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id="solution2usingasynclibrary"&gt;Solution 2: Using &lt;code&gt;async&lt;/code&gt; library&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');  
var bl = require('bl');  
var async = require('async');

var URLs = [process.argv[2], process.argv[3], process.argv[4]];

async.map(URLs, function(url, callback) {

    http.get(url, function (response) {

      response.pipe(bl(function (err, data) {
        if (err) {
          return console.error(err);
        }
        callback(null, data.toString());
      }));

    });


}, function(err, results) {
  for(var i = 0; i &amp;lt; results.length; i++)
    console.log(results[i]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id="solution3usingafterlibrary"&gt;Solution 3: Using &lt;code&gt;after&lt;/code&gt; library&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');  
var bl = require('bl');  
var after = require('after');  
var url = [process.argv[2], process.argv[3], process.argv[4]];  
var results = ["", "", ""];  
var next = after(3, printData);

http.get(url[0], function (response) {  
      response.pipe(bl(function (err, data) {
        if (err) {
          return console.error(err);
        }
        results[0] = data.toString();
        next();
      }));
});
http.get(url[1], function (response) {

      response.pipe(bl(function (err, data) {
        if (err) {
          return console.error(err);
        }
        results[1] = data.toString();
        next();
      }));
});
http.get(url[2], function (response) {

      response.pipe(bl(function (err, data) {
        if (err) {
          return console.error(err);
        }
        results[2] = data.toString();
        next();
      }));
});

function printData(){  
  for(var i = 0; i &amp;lt; results.length; i++)
    console.log(results[i]);
}
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>HTTP Collect</title><description>&lt;h3 id="problem"&gt;Problem&lt;/h3&gt;

&lt;p&gt;Write a program that performs an HTTP GET request to a URL provided to you as the first command-line argument. Collect all data from the server (not just the first "data" event) and then write two lines to the console (stdout).  &lt;/p&gt;

&lt;p&gt;The first line you write should just be&lt;/p&gt;</description><link>https://ghost-nithmanoj.c9users.io/http-collect/</link><guid isPermaLink="false">9c8a231f-eefd-4043-9aba-3e74f0fb6976</guid><category>nodejs</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Mon, 14 Nov 2016 06:51:56 GMT</pubDate><content:encoded>&lt;h3 id="problem"&gt;Problem&lt;/h3&gt;

&lt;p&gt;Write a program that performs an HTTP GET request to a URL provided to you as the first command-line argument. Collect all data from the server (not just the first "data" event) and then write two lines to the console (stdout).  &lt;/p&gt;

&lt;p&gt;The first line you write should just be an integer representing the number of characters received from the server. The second line should contain the complete String of characters sent by the server. &lt;/p&gt;

&lt;h3 id="approaches"&gt;Approaches&lt;/h3&gt;

&lt;p&gt;There are two approaches you can take to this problem:  &lt;/p&gt;

&lt;h5 id="1bylogicapproach"&gt;1. By logic Approach&lt;/h5&gt;

&lt;p&gt;Collect data across multiple "data" events and append the results together prior to printing the output. Use the "end" event to determine when the stream is finished and you can write the output. &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');

var url = process.argv[2];

http.get(url, function(response){

    var fullData = '';
    response.setEncoding('utf8');
    response.on('data', function(data){
        fullData += data;
    });
    response.on('end', function(){
        console.log(fullData.length);
        console.log(fullData);
    });
    response.on('error', console.error);
}).on('error', console.error);
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id="2thirdpartypackageapproach"&gt;2. Third Party Package Approach&lt;/h5&gt;

&lt;p&gt;2) Use a third-party package to abstract the difficulties involved in collecting an entire stream of data. Two different packages provide a useful API for solving this problem (there are likely more!): &lt;code&gt;bl&lt;/code&gt; (Buffer List) and &lt;code&gt;concat-stream&lt;/code&gt; take your pick!  &lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ npm install bl  
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Both &lt;code&gt;bl&lt;/code&gt; and &lt;code&gt;concat-stream&lt;/code&gt; can have a stream piped in to them and they will collect the data for you. Once the stream has ended, a callback will be fired with the data:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript   "&gt;   response.pipe(bl(function (err, data) {
     /* ... */ 
   }))

     // or  

   response.pipe(concatStream(function (data) {
        /* ... */ 
   }))  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you will probably need to &lt;code&gt;data.toString()&lt;/code&gt; to convert from a Buffer.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;solution&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;    var http = require('http')
    var bl = require('bl')

    http.get(process.argv[2], function (response) {
      response.pipe(bl(function (err, data) {
        if (err) {
          return console.error(err)
        }
        data = data.toString()
        console.log(data.length)
        console.log(data)
      }))
    })
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Welcome to Ghost</title><description>&lt;p&gt;You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you arrive, you can select this post from a list&lt;/p&gt;</description><link>https://ghost-nithmanoj.c9users.io/welcome-to-ghost/</link><guid isPermaLink="false">73e7e1c4-cd99-487c-9774-c0ada552b080</guid><category>Getting Started</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Sat, 01 Oct 2016 22:26:16 GMT</pubDate><content:encoded>&lt;p&gt;You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!&lt;/p&gt;

&lt;h2 id="gettingstarted"&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!&lt;/p&gt;

&lt;p&gt;Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use &lt;em&gt;shortcuts&lt;/em&gt; to &lt;strong&gt;style&lt;/strong&gt; your content. For example, a list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Item number one&lt;/li&gt;
&lt;li&gt;Item number two
&lt;ul&gt;&lt;li&gt;A nested item&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A final item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or with numbers!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remember to buy some milk  &lt;/li&gt;
&lt;li&gt;Drink the milk  &lt;/li&gt;
&lt;li&gt;Tweet that I remembered to buy the milk, and drank it&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="links"&gt;Links&lt;/h3&gt;

&lt;p&gt;Want to link to a source? No problem. If you paste in a URL, like &lt;a href="http://ghost.org"&gt;http://ghost.org&lt;/a&gt; - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to &lt;a href="http://ghost.org"&gt;the Ghost website&lt;/a&gt;. Neat.&lt;/p&gt;

&lt;h3 id="whataboutimages"&gt;What about Images?&lt;/h3&gt;

&lt;p&gt;Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ghost.org/images/ghost.png" alt="The Ghost Logo"&gt;&lt;/p&gt;

&lt;p&gt;Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:&lt;/p&gt;

&lt;h3 id="quoting"&gt;Quoting&lt;/h3&gt;

&lt;p&gt;Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ghost - Just a blogging platform&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="workingwithcode"&gt;Working with Code&lt;/h3&gt;

&lt;p&gt;Got a streak of geek? We've got you covered there, too. You can write inline &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.awesome-thing {
    display: block;
    width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="readyforabreak"&gt;Ready for a Break?&lt;/h3&gt;

&lt;p&gt;Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="advancedusage"&gt;Advanced Usage&lt;/h3&gt;

&lt;p&gt;There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.&lt;/p&gt;

&lt;p&gt;&lt;input type="text" placeholder="I'm an input field!"&gt;&lt;/p&gt;

&lt;p&gt;That should be enough to get you started. Have fun - and let us know what you think :)&lt;/p&gt;</content:encoded></item></channel></rss>