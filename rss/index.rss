<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Manoj Kumar</title><description>Fun Profit &amp; Web</description><link>https://ghost-nithmanoj.c9users.io/</link><generator>Ghost 0.11</generator><lastBuildDate>Tue, 27 Dec 2016 06:20:18 GMT</lastBuildDate><atom:link href="https://ghost-nithmanoj.c9users.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Winuall Intern part 2</title><description>&lt;p&gt;I'll discuss part of my work I am serving as Backend Web Developer. In last post I discussed some of the common techniques that I became familiar with backend designing. Winuall is designing an e-commerce platform with laravel as backend and Angular 2 as front end. I happen to build&lt;/p&gt;</description><link>https://ghost-nithmanoj.c9users.io/winuall-intern-part-2/</link><guid isPermaLink="false">eabaca15-d488-45a2-8eb2-487a284ff99e</guid><category>winuall</category><category>intern</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Tue, 27 Dec 2016 06:10:58 GMT</pubDate><content:encoded>&lt;p&gt;I'll discuss part of my work I am serving as Backend Web Developer. In last post I discussed some of the common techniques that I became familiar with backend designing. Winuall is designing an e-commerce platform with laravel as backend and Angular 2 as front end. I happen to build for them &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Price model&lt;/li&gt;
&lt;li&gt;Product Controller&lt;/li&gt;
&lt;li&gt;Dashboard Filter Controller&lt;/li&gt;
&lt;li&gt;Discount Model&lt;/li&gt;
&lt;li&gt;Discount Controller&lt;/li&gt;
&lt;li&gt;Coupon Model&lt;/li&gt;
&lt;li&gt;Checkout Model&lt;/li&gt;
&lt;li&gt;Address Controller&lt;/li&gt;
&lt;li&gt;Checkout Controller&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do you think about post? Let me know through comments below!&lt;/p&gt;</content:encoded></item><item><title>Winuall Intern (week 1)</title><description>&lt;p&gt;In this post I will be summarising my first week experience with Winuall building backend for e-commerce platform. &lt;strong&gt;Winuall&lt;/strong&gt; is an online education platform, where JEE aspirants can ask question to experts &lt;a href="https://www.winuall.com/about-us"&gt;Know More&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Winuall e-commerce platform uses &lt;a href="https://laravel.com"&gt;Laravel&lt;/a&gt; (PHP Web Framework) in Backend and &lt;a href="https://angular.io"&gt;AngularJS&lt;/a&gt; (JS Framework) in frontend.&lt;/p&gt;</description><link>https://ghost-nithmanoj.c9users.io/winuall-laravel-intern-experience/</link><guid isPermaLink="false">847d725a-db0e-407a-9d2e-670be8f512e6</guid><category>winuall</category><category>laravel</category><category>PHP</category><category>AngularJS</category><category>API</category><category>intern</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Tue, 13 Dec 2016 18:38:57 GMT</pubDate><content:encoded>&lt;p&gt;In this post I will be summarising my first week experience with Winuall building backend for e-commerce platform. &lt;strong&gt;Winuall&lt;/strong&gt; is an online education platform, where JEE aspirants can ask question to experts &lt;a href="https://www.winuall.com/about-us"&gt;Know More&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Winuall e-commerce platform uses &lt;a href="https://laravel.com"&gt;Laravel&lt;/a&gt; (PHP Web Framework) in Backend and &lt;a href="https://angular.io"&gt;AngularJS&lt;/a&gt; (JS Framework) in frontend. I am developing backend for their platform.&lt;/p&gt;

&lt;h4 id="laravel"&gt;Laravel&lt;/h4&gt;

&lt;p&gt;Laravel is intended for the development of web applications following the model–view–controller (MVC) architectural pattern. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Eloquent ORM&lt;/strong&gt; (object-relational mapping) is an advanced PHP implementation of the active record pattern, providing at the same time internal methods for enforcing constraints on the relationships between database objects. Following the active record pattern, Eloquent ORM presents database tables as classes, with their object instances tied to single table rows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Migrations&lt;/strong&gt; provide a version control system for database schemas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database seeding&lt;/strong&gt; provides a way to populate database tables with selected default data.&lt;/p&gt;

&lt;h4 id="webapis"&gt;Web API's&lt;/h4&gt;

&lt;p&gt;The server-side web API is a programmatic interface consisting of one or more publicly exposed endpoints to a defined request–response message system, expressed in JSON.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Laravel API Boilerplate&lt;/strong&gt; is a "starter kit" you can use to build your first API.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Everyone and their dog wants an API, so you should probably learn how to build them.
  &lt;a href="https://leanpub.com/build-apis-you-wont-hate"&gt;https://leanpub.com/build-apis-you-wont-hate&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What do you think about post? Let me know through comments below!&lt;/p&gt;</content:encoded></item><item><title>Startup Expert</title><description>&lt;p&gt;Like many people, I was not sure whether there are cut out to start our own business. After reading the Start-up Expert's first book 'Get Ready' I have a better understanding of the challenges ahead and whether I have the character and determination to succeed.&lt;/p&gt;

&lt;h4 id="mynotes"&gt;My Notes&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Alistair Milne&lt;/em&gt;&lt;/strong&gt; very&lt;/p&gt;</description><link>https://ghost-nithmanoj.c9users.io/startup-expert/</link><guid isPermaLink="false">e080b087-a5d4-4e8a-bf93-799971f213e5</guid><category>startup</category><category>Entrepreneurship</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Fri, 25 Nov 2016 11:01:29 GMT</pubDate><media:content url="https://ghost-nithmanoj.c9users.io/content/images/2016/11/eCorner_Education2-min.jpg" medium="image"/><content:encoded>&lt;img src="https://ghost-nithmanoj.c9users.io/content/images/2016/11/eCorner_Education2-min.jpg" alt="Startup Expert"&gt;&lt;p&gt;Like many people, I was not sure whether there are cut out to start our own business. After reading the Start-up Expert's first book 'Get Ready' I have a better understanding of the challenges ahead and whether I have the character and determination to succeed.&lt;/p&gt;

&lt;h4 id="mynotes"&gt;My Notes&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Alistair Milne&lt;/em&gt;&lt;/strong&gt; very creatively put example of trial and error and childhood learning and fearing to fail later.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Entrepreneurship is about conquering fears, ignoring people who may doubt you and being able to constantly adapt and refine your strategy and approach.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Small line which motivates to put dedication  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your playing small does not serve the world. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id="theywantyoutofail"&gt;'&lt;strong&gt;They want you to fail&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Author very beautifully explains that most people want you to fail, to risk free boring work life, rather than trial and error with lots of success and failures startup life. &lt;br&gt;
&lt;center&gt;  &lt;/center&gt;&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;reading startup expert - &amp;quot;Entrepreneurs innovate generate wealth, create employment.. often risking their own financial security.&amp;quot;&lt;/p&gt;&amp;mdash; Manoj kumar (@owsmmj) &lt;a href="https://twitter.com/owsmmj/status/802065755604815872"&gt;November 25, 2016&lt;/a&gt;&lt;/blockquote&gt;  

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;  

&lt;p&gt; &lt;br&gt;
After all when it is so much good for society and for our own pursuit of happiness why not startup ?&lt;/p&gt;

&lt;p&gt;What do you think about post? Share your thoughts in the comments below!&lt;/p&gt;</content:encoded></item><item><title>Scopes</title><description>&lt;p&gt;The main type of scope in Javascript is Lexical Scoping. Present in the language from the very beginning, this is the scope created within a function, and the one most developers are familiar with. &lt;br&gt;
ES6 recently defined Block Scoping. This scope is created within curly braced blocks.&lt;/p&gt;

&lt;h2 id="intializingvariables"&gt;Intializing Variables&lt;/h2&gt;

&lt;p&gt;The&lt;/p&gt;</description><link>https://ghost-nithmanoj.c9users.io/scopes/</link><guid isPermaLink="false">0107f13c-833b-4cd5-a63a-149d548cc43b</guid><category>nodejs</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Thu, 17 Nov 2016 02:45:16 GMT</pubDate><content:encoded>&lt;p&gt;The main type of scope in Javascript is Lexical Scoping. Present in the language from the very beginning, this is the scope created within a function, and the one most developers are familiar with. &lt;br&gt;
ES6 recently defined Block Scoping. This scope is created within curly braced blocks.&lt;/p&gt;

&lt;h2 id="intializingvariables"&gt;Intializing Variables&lt;/h2&gt;

&lt;p&gt;The way a variable is initialized determines which scope type it is:&lt;/p&gt;

&lt;h3 id="lexicalscope"&gt;Lexical Scope&lt;/h3&gt;

&lt;p&gt;var is used to denote a variable which is Lexically Scoped to the current &lt;br&gt;
function:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;    function someFunc() {
      var aVariable;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aVariable is lexically scoped within someFunc&lt;/p&gt;

&lt;h3 id="blockscope"&gt;Block Scope&lt;/h3&gt;

&lt;p&gt;let &amp;amp; const are used to denote variables which are Block Scoped to the &lt;br&gt;
current curly braced block:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;    if (true) {
      let aVariable;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;aVariable is block scoped within the if's curly braces&lt;/p&gt;

&lt;h3 id="nestedscope"&gt;Nested Scope&lt;/h3&gt;

&lt;p&gt;Each nested inner scope has access to outer scope variables, but NOT vice-versa.  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;function someFunc() {  
   var outerVar = 1;
   function inner() {
     var innerVar = 2;
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;inner has access to both &lt;em&gt;innerVar&lt;/em&gt; &amp;amp; &lt;em&gt;outerVar&lt;/em&gt;, but &lt;em&gt;someFunc&lt;/em&gt; only has access to &lt;em&gt;outerVar&lt;/em&gt;&lt;/p&gt;

&lt;h3 id="globalscope"&gt;Global Scope&lt;/h3&gt;

&lt;p&gt;When assigning a variable without using either of var, let, etc, the variable is assumed to exist in an outer scope.  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;    function someFunc() {
       var scopedVar = 1;
       function inner() {
          foo = 2;
       }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Searches the outer scope until the &lt;em&gt;Global Scope&lt;/em&gt; is reached and if not found on global scope create it on window object(global scope).&lt;/p&gt;

&lt;h3 id="shadowing"&gt;Shadowing&lt;/h3&gt;

&lt;p&gt;It is perfectly valid to define two different variables, in different scopes, with the same name:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;    function someFunc() {
       var foo = 1;
    }
    function anotherFunc() {
       var foo = 2;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is also valid to do this in nested scopes:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;    function someFunc() {
       var foo = 1;
       function inner() {
          var foo = 2;
       }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is called Shadowing. The foo inside inner() is said to Shadow the foo inside someFunc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What do you think about post? Share your thoughts in the comments below!&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;</content:encoded></item><item><title>HTTP JSON API Server</title><description>&lt;p&gt;An HTTP server that serves JSON data when it receives a GET request to the path '/api/parsetime'. Expect the request to contain a query string with a key 'iso' and an ISO-format time as the value. &lt;br&gt;
e.g. &lt;code&gt;/api/parsetime?iso=2013-08-10T12:10:15.474Z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;JSON response should&lt;/p&gt;</description><link>https://ghost-nithmanoj.c9users.io/http-json-api-server/</link><guid isPermaLink="false">f20a59d8-9c25-4069-a061-8c8af3c5de5e</guid><category>nodejs</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Wed, 16 Nov 2016 16:13:36 GMT</pubDate><content:encoded>&lt;p&gt;An HTTP server that serves JSON data when it receives a GET request to the path '/api/parsetime'. Expect the request to contain a query string with a key 'iso' and an ISO-format time as the value. &lt;br&gt;
e.g. &lt;code&gt;/api/parsetime?iso=2013-08-10T12:10:15.474Z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;JSON response should contain only &lt;mark&gt;hour&lt;/mark&gt;, &lt;mark&gt;minute&lt;/mark&gt; and &lt;mark&gt;second&lt;/mark&gt; properties. For example:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt; {  
   "hour": 14,  
   "minute": 23,  
   "second": 15  
 }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add second endpoint for the path '/api/unixtime' which accepts the same query string but returns UNIX epoch time in milliseconds (the number of milliseconds since 1 Jan 1970 00:00:00 UTC) under the property 'unixtime'. &lt;br&gt;
For example:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt; { "unixtime": 1376136615474 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Server listens to port provided as second argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');  
var url = require('url');

var server = http.createServer(function(req, res){

    var urlObj = url.parse(req.url, true);
    var time = new Date(urlObj.query.iso);
    res.writeHead(200, { 'Content-Type': 'application/json' });

    if(urlObj.pathname == '/api/parsetime'){
      res.end(JSON.stringify({
        'hour':Number(time.getHours()),
        'minute':Number(time.getMinutes()),
        'second':Number(time.getSeconds())}));
    }else{
      res.end(JSON.stringify( {unixtime: time.getTime()} ));
    }
});
server.listen(process.argv[2]);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;What do you think about post? Share your thoughts in the comments below!&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;</content:encoded></item><item><title>NodeJs server</title><description>&lt;p&gt;TCP time server, server should listen to TCP connections on the port provided by the first argument of program. For each connection write the current date &amp;amp; 24 hour time in format &lt;code&gt;YYYY-MM-DD hh:mm&lt;/code&gt;&lt;/p&gt;

&lt;h4 id="timeserver"&gt;Time Server&lt;/h4&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var net = require('net');  
var strftime = require('strftime');

var server = net.createServer(function&lt;/code&gt;&lt;/pre&gt;</description><link>https://ghost-nithmanoj.c9users.io/untitled/</link><guid isPermaLink="false">d4d1e740-5f4e-422e-aabf-53dff6c2b251</guid><category>nodejs</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Wed, 16 Nov 2016 15:54:52 GMT</pubDate><content:encoded>&lt;p&gt;TCP time server, server should listen to TCP connections on the port provided by the first argument of program. For each connection write the current date &amp;amp; 24 hour time in format &lt;code&gt;YYYY-MM-DD hh:mm&lt;/code&gt;&lt;/p&gt;

&lt;h4 id="timeserver"&gt;Time Server&lt;/h4&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var net = require('net');  
var strftime = require('strftime');

var server = net.createServer(function (socket){  
  socket.write(strftime('%F %H:%M\n'));
  socket.end();
});

server.listen(process.argv[2]);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h4 id="fileserver"&gt;File Server&lt;/h4&gt;

&lt;p&gt;HTTP server that serves the same text file for each request it receives.  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');  
var fs = require('fs');

console.log(process.argv[2]);  
console.log(process.argv[3]);

var server = http.createServer(function(req, res){  
  fs.createReadStream(process.argv[3]).pipe(res);
});
server.listen(process.argv[2]);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h4 id="uppercaserer"&gt;Upper Caserer&lt;/h4&gt;

&lt;p&gt;HTTP server that receives only POST requests and converts incoming POST body characters to upper-case and returns it to the client.  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');  
var map = require('through2-map');

var server = http.createServer(function(req, res){

     req.pipe(map(function (chunk) {  
       return chunk.toString().toUpperCase();  
     })).pipe(res)
});

server.listen(process.argv[2]);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;What do you think about post? Share your thoughts in the comments below!&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;</content:encoded></item><item><title>JUGGLING ASYNC</title><description>&lt;p&gt;This problem is the same as the previous problem (HTTP COLLECT) in that you need to use &lt;code&gt;http.get()&lt;/code&gt;. However, this time you will be provided with three URLs as the first three command-line arguments. &lt;br&gt;
  You must collect the complete content provided to you by each of the URLs and&lt;/p&gt;</description><link>https://ghost-nithmanoj.c9users.io/juggling-async/</link><guid isPermaLink="false">a2d1205f-a0b9-462e-b6ce-a2621dac61fd</guid><category>nodejs</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Wed, 16 Nov 2016 04:19:18 GMT</pubDate><content:encoded>&lt;p&gt;This problem is the same as the previous problem (HTTP COLLECT) in that you need to use &lt;code&gt;http.get()&lt;/code&gt;. However, this time you will be provided with three URLs as the first three command-line arguments. &lt;br&gt;
  You must collect the complete content provided to you by each of the URLs and print it to the console. And that also in proper sequence i.e. link 1 data first.&lt;/p&gt;

&lt;h5 id="solution1withoutusinganyexternallibrary"&gt;Solution 1: Without using any external library&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');  
var bl = require('bl');  
var results = [];  
var count = 0;

function printResults () {  
  for (var i = 0; i &amp;lt; 3; i++) {
    console.log(results[i]);
  }
}

function httpGet (index) {  
  http.get(process.argv[2 + index], function (response) {
    response.pipe(bl(function (err, data) {
      if (err) {
        return console.error(err);
      }

      results[index] = data.toString()
      count++

      if (count === 3) {
        printResults();
      }
    }));
  });
}

for (var i = 0; i &amp;lt; 3; i++) {  
  httpGet(i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h5 id="solution2usingasynclibrary"&gt;Solution 2: Using &lt;code&gt;async&lt;/code&gt; library&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');  
var bl = require('bl');  
var async = require('async');

var URLs = [process.argv[2], process.argv[3], process.argv[4]];

async.map(URLs, function(url, callback) {

    http.get(url, function (response) {

      response.pipe(bl(function (err, data) {
        if (err) {
          return console.error(err);
        }
        callback(null, data.toString());
      }));

    });


}, function(err, results) {
  for(var i = 0; i &amp;lt; results.length; i++)
    console.log(results[i]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h5 id="solution3usingafterlibrary"&gt;Solution 3: Using &lt;code&gt;after&lt;/code&gt; library&lt;/h5&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');  
var bl = require('bl');  
var after = require('after');  
var url = [process.argv[2], process.argv[3], process.argv[4]];  
var results = ["", "", ""];  
var next = after(3, printData);

http.get(url[0], function (response) {  
      response.pipe(bl(function (err, data) {
        if (err) {
          return console.error(err);
        }
        results[0] = data.toString();
        next();
      }));
});
http.get(url[1], function (response) {

      response.pipe(bl(function (err, data) {
        if (err) {
          return console.error(err);
        }
        results[1] = data.toString();
        next();
      }));
});
http.get(url[2], function (response) {

      response.pipe(bl(function (err, data) {
        if (err) {
          return console.error(err);
        }
        results[2] = data.toString();
        next();
      }));
});

function printData(){  
  for(var i = 0; i &amp;lt; results.length; i++)
    console.log(results[i]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;What do you think about post? Share your thoughts in the comments below!&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;</content:encoded></item><item><title>HTTP Collect</title><description>&lt;h3 id="problem"&gt;Problem&lt;/h3&gt;

&lt;p&gt;Write a program that performs an HTTP GET request to a URL provided to you as the first command-line argument. Collect all data from the server (not just the first "data" event) and then write two lines to the console (stdout).  &lt;/p&gt;

&lt;p&gt;The first line you write should just be&lt;/p&gt;</description><link>https://ghost-nithmanoj.c9users.io/http-collect/</link><guid isPermaLink="false">9c8a231f-eefd-4043-9aba-3e74f0fb6976</guid><category>nodejs</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Mon, 14 Nov 2016 06:51:56 GMT</pubDate><content:encoded>&lt;h3 id="problem"&gt;Problem&lt;/h3&gt;

&lt;p&gt;Write a program that performs an HTTP GET request to a URL provided to you as the first command-line argument. Collect all data from the server (not just the first "data" event) and then write two lines to the console (stdout).  &lt;/p&gt;

&lt;p&gt;The first line you write should just be an integer representing the number of characters received from the server. The second line should contain the complete String of characters sent by the server. &lt;/p&gt;

&lt;h3 id="approaches"&gt;Approaches&lt;/h3&gt;

&lt;p&gt;There are two approaches you can take to this problem:  &lt;/p&gt;

&lt;h5 id="1bylogicapproach"&gt;1. By logic Approach&lt;/h5&gt;

&lt;p&gt;Collect data across multiple "data" events and append the results together prior to printing the output. Use the "end" event to determine when the stream is finished and you can write the output. &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');

var url = process.argv[2];

http.get(url, function(response){

    var fullData = '';
    response.setEncoding('utf8');
    response.on('data', function(data){
        fullData += data;
    });
    response.on('end', function(){
        console.log(fullData.length);
        console.log(fullData);
    });
    response.on('error', console.error);
}).on('error', console.error);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;  &lt;/p&gt;

&lt;h5 id="2thirdpartypackageapproach"&gt;2. Third Party Package Approach&lt;/h5&gt;

&lt;p&gt;2) Use a third-party package to abstract the difficulties involved in collecting an entire stream of data. Two different packages provide a useful API for solving this problem (there are likely more!): &lt;code&gt;bl&lt;/code&gt; (Buffer List) and &lt;code&gt;concat-stream&lt;/code&gt; take your pick!  &lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ npm install bl  
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Both &lt;code&gt;bl&lt;/code&gt; and &lt;code&gt;concat-stream&lt;/code&gt; can have a stream piped in to them and they will collect the data for you. Once the stream has ended, a callback will be fired with the data:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript   "&gt;   response.pipe(bl(function (err, data) {
     /* ... */ 
   }))

     // or  

   response.pipe(concatStream(function (data) {
        /* ... */ 
   }))  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you will probably need to &lt;code&gt;data.toString()&lt;/code&gt; to convert from a Buffer.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;solution&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;    var http = require('http')
    var bl = require('bl')

    http.get(process.argv[2], function (response) {
      response.pipe(bl(function (err, data) {
        if (err) {
          return console.error(err)
        }
        data = data.toString()
        console.log(data.length)
        console.log(data)
      }))
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;What do you think about post? Share your thoughts in the comments below!&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;</content:encoded></item><item><title>Welcome to Ghost</title><description>&lt;p&gt;You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you arrive, you can select this post from a list&lt;/p&gt;</description><link>https://ghost-nithmanoj.c9users.io/welcome-to-ghost/</link><guid isPermaLink="false">73e7e1c4-cd99-487c-9774-c0ada552b080</guid><category>Getting Started</category><dc:creator>Manoj Kumar</dc:creator><pubDate>Sat, 01 Oct 2016 22:26:16 GMT</pubDate><content:encoded>&lt;p&gt;You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!&lt;/p&gt;

&lt;h2 id="gettingstarted"&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!&lt;/p&gt;

&lt;p&gt;Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use &lt;em&gt;shortcuts&lt;/em&gt; to &lt;strong&gt;style&lt;/strong&gt; your content. For example, a list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Item number one&lt;/li&gt;
&lt;li&gt;Item number two
&lt;ul&gt;&lt;li&gt;A nested item&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A final item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or with numbers!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remember to buy some milk  &lt;/li&gt;
&lt;li&gt;Drink the milk  &lt;/li&gt;
&lt;li&gt;Tweet that I remembered to buy the milk, and drank it&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="links"&gt;Links&lt;/h3&gt;

&lt;p&gt;Want to link to a source? No problem. If you paste in a URL, like &lt;a href="http://ghost.org"&gt;http://ghost.org&lt;/a&gt; - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to &lt;a href="http://ghost.org"&gt;the Ghost website&lt;/a&gt;. Neat.&lt;/p&gt;

&lt;h3 id="whataboutimages"&gt;What about Images?&lt;/h3&gt;

&lt;p&gt;Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ghost.org/images/ghost.png" alt="The Ghost Logo"&gt;&lt;/p&gt;

&lt;p&gt;Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:&lt;/p&gt;

&lt;h3 id="quoting"&gt;Quoting&lt;/h3&gt;

&lt;p&gt;Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ghost - Just a blogging platform&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="workingwithcode"&gt;Working with Code&lt;/h3&gt;

&lt;p&gt;Got a streak of geek? We've got you covered there, too. You can write inline &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.awesome-thing {
    display: block;
    width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="readyforabreak"&gt;Ready for a Break?&lt;/h3&gt;

&lt;p&gt;Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="advancedusage"&gt;Advanced Usage&lt;/h3&gt;

&lt;p&gt;There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.&lt;/p&gt;

&lt;p&gt;&lt;input type="text" placeholder="I'm an input field!"&gt;&lt;/p&gt;

&lt;p&gt;That should be enough to get you started. Have fun - and let us know what you think :)&lt;/p&gt;</content:encoded></item></channel></rss>